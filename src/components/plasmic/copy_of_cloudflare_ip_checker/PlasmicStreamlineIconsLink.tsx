/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pVt2oR5EtQUEdy73p3KcxV
// Component: OyXAn4ZHyP8
import * as React from "react";
import {
  hasVariant,
  createPlasmicElement,
  RenderOpts,
  Override,
  classNames,
  Flex,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg
} from "@plasmicapp/react-web";
import Link from "../../Link"; // plasmic-import: MOaq4ic9l39/component

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_copy_of_cloudflare_ip_checker.css"; // plasmic-import: pVt2oR5EtQUEdy73p3KcxV/projectcss
import "./PlasmicStreamlineIconsLink.css"; // plasmic-import: OyXAn4ZHyP8/css

export type PlasmicStreamlineIconsLink__VariantsArgs = {};

export type PlasmicStreamlineIconsLink__ArgsType = {};

const PlasmicStreamlineIconsLink__RenderFuncs = {
  root: (
    opts: RenderOpts<
      PlasmicStreamlineIconsLink__VariantsArgs,
      PlasmicStreamlineIconsLink__ArgsType,
      {
        root?: Flex<"div">;
        box?: Flex<"div">;
        link?: Flex<typeof Link>;
      }
    >
  ): React.ReactElement => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <div
        data-plasmic-override={overrides.root}
        className={classNames({
          "StreamlineIconsLink__root__fMI-Y": true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {PlasmicStreamlineIconsLink__RenderFuncs.box({
          variants,
          args,
          overrides
        })}

        {PlasmicStreamlineIconsLink__RenderFuncs.link({
          variants,
          args,
          overrides
        })}
      </div>
    );
  },
  box: (
    opts: RenderOpts<
      PlasmicStreamlineIconsLink__VariantsArgs,
      PlasmicStreamlineIconsLink__ArgsType,
      {
        box?: Flex<"div">;
      }
    >
  ): React.ReactElement => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <div
        data-plasmic-override={overrides.box}
        className={classNames({
          StreamlineIconsLink__box__EFehs: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {"Icon by "}
      </div>
    );
  },
  link: (
    opts: RenderOpts<
      PlasmicStreamlineIconsLink__VariantsArgs,
      PlasmicStreamlineIconsLink__ArgsType,
      {
        link?: Flex<typeof Link>;
      }
    >
  ): React.ReactElement => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <Link
        data-plasmic-override={overrides.link}
        className={classNames({
          StreamlineIconsLink__link__q4yib: true,
          __wab_instance: true
        })}
        {...({} as any)}
      ></Link>
    );
  }
};

const PlasmicStreamlineIconsLink__FCs = {
  root: undefined,
  box: undefined,
  link: undefined
};

class PlasmicStreamlineIconsLink__Renderer extends Renderer<
  PlasmicStreamlineIconsLink__VariantsArgs,
  PlasmicStreamlineIconsLink__ArgsType,
  typeof PlasmicStreamlineIconsLink__RenderFuncs,
  "root"
> {
  constructor(
    variants: PlasmicStreamlineIconsLink__VariantsArgs,
    args: PlasmicStreamlineIconsLink__ArgsType
  ) {
    super(variants, args, PlasmicStreamlineIconsLink__RenderFuncs, "root");
  }

  protected create(
    variants: PlasmicStreamlineIconsLink__VariantsArgs,
    args: PlasmicStreamlineIconsLink__ArgsType
  ) {
    return new PlasmicStreamlineIconsLink__Renderer(variants, args);
  }

  withVariants(
    variants: PlasmicStreamlineIconsLink__VariantsArgs
  ): PlasmicStreamlineIconsLink__Renderer {
    return super.withVariants(variants) as PlasmicStreamlineIconsLink__Renderer;
  }

  withArgs(
    args: PlasmicStreamlineIconsLink__ArgsType
  ): PlasmicStreamlineIconsLink__Renderer {
    return super.withArgs(args) as PlasmicStreamlineIconsLink__Renderer;
  }

  getInternalVariantProps() {
    return [];
  }

  getInternalArgProps() {
    return [];
  }

  forNode(
    name: "root"
  ): NodeRenderer<typeof PlasmicStreamlineIconsLink__RenderFuncs["root"]>;
  forNode(
    name: "box"
  ): NodeRenderer<typeof PlasmicStreamlineIconsLink__RenderFuncs["box"]>;
  forNode(
    name: "link"
  ): NodeRenderer<typeof PlasmicStreamlineIconsLink__RenderFuncs["link"]>;
  forNode(name: keyof typeof PlasmicStreamlineIconsLink__RenderFuncs) {
    return super.forNode(name);
  }
}

interface PlasmicStreamlineIconsLinkRootProps {
  variants?: PlasmicStreamlineIconsLink__VariantsArgs;
  args?: Partial<PlasmicStreamlineIconsLink__ArgsType>;
  root?: Flex<"div">;
  box?: Flex<"div">;
  link?: Flex<typeof Link>;
}

export const PlasmicStreamlineIconsLink = ((
  props: PlasmicStreamlineIconsLinkRootProps
) => {
  return new PlasmicStreamlineIconsLink__Renderer(
    props.variants || {},
    props.args || {}
  )
    .forNode("root")
    .withOverrides({
      root: props.root,
      box: props.box,
      link: props.link
    })
    .render();
}) as React.FunctionComponent<PlasmicStreamlineIconsLinkRootProps> & {
  box: React.FunctionComponent<PlasmicStreamlineIconsLinkBoxProps>;
  link: React.FunctionComponent<PlasmicStreamlineIconsLinkLinkProps>;
  createRenderer: () => PlasmicStreamlineIconsLink__Renderer;
};

interface PlasmicStreamlineIconsLinkBoxProps {
  variants?: PlasmicStreamlineIconsLink__VariantsArgs;
  args?: Partial<PlasmicStreamlineIconsLink__ArgsType>;
  box?: Flex<"div">;
}

PlasmicStreamlineIconsLink.box = ((
  props: PlasmicStreamlineIconsLinkBoxProps
) => {
  return new PlasmicStreamlineIconsLink__Renderer(
    props.variants || {},
    props.args || {}
  )
    .forNode("box")
    .withOverrides({
      box: props.box
    })
    .render();
}) as React.FunctionComponent<PlasmicStreamlineIconsLinkBoxProps>;

interface PlasmicStreamlineIconsLinkLinkProps {
  variants?: PlasmicStreamlineIconsLink__VariantsArgs;
  args?: Partial<PlasmicStreamlineIconsLink__ArgsType>;
  link?: Flex<typeof Link>;
}

PlasmicStreamlineIconsLink.link = ((
  props: PlasmicStreamlineIconsLinkLinkProps
) => {
  return new PlasmicStreamlineIconsLink__Renderer(
    props.variants || {},
    props.args || {}
  )
    .forNode("link")
    .withOverrides({
      link: props.link
    })
    .render();
}) as React.FunctionComponent<PlasmicStreamlineIconsLinkLinkProps>;

PlasmicStreamlineIconsLink.createRenderer = () =>
  new PlasmicStreamlineIconsLink__Renderer({}, {});

export default PlasmicStreamlineIconsLink;
/* prettier-ignore-end */
